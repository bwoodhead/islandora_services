<?php

/**
 * Islandora menu hook
 * @return string 
 */
function islandora_services_menu() {

    // Create an array to return
    $items = array();

    // Display all endpoints page
    $items['islandora_services/list'] = array(
        'title' => 'Islandora Services List',
        'page callback' => 'islandora_services_list_page',
        'access arguments' => array('view'),
        'type' => MENU_NORMAL_ITEM
    );

    // Create a global list of all the services
    $services = module_invoke_all('register_services');
    
    // Store the list for later use
    variable_set('islandora_services', $services);
    
    // Loop through all the modules to get endpoints
    foreach($services as $module => $endpoints) {
        
        // Loop through all the end points to get the parameters
        foreach($endpoints as $endpoint => $params) {
            
            if ( !array_key_exists('standalone', $params) ) {
                $params['standalone'] = true;
            }
            
            // Register an end point with drupal
            $items['islandora_services/'. $module ."/". $endpoint] = array(
                'title' => $params['title'],
                'page callback' => 'islandora_service_handler',
                'page arguments' => array($module, $params),
                'access arguments' => $params['security'],
                'type' => MENU_CALLBACK
            );
        }
    }

    // Return the link
    return $items;
}

function islandora_services_list_page() {

    // Create the return element
    $content = null;
    
    $header = array("End Point", "Title", "Type", "Handler", "Standalone", "Format", "Example");
    $rows = array();
    $services = variable_get('islandora_services', NULL);

    // Loop through all the modules to get endpoints
    foreach($services as $module => $endpoints) {
        
        $content .= "<br><h3>Module: " . $module . "</h3>";
        $rows = array();
        
        // Loop through all the end points to get the parameters
        foreach($endpoints as $endpoint => $params) {

            // Get the function, datastream or file information
            $type = "Unknown";
            $handler = "None";
            if ( array_key_exists('function', $params) ) {
                $type = "Callback";
                $handler = $params['function'];
            } elseif ( array_key_exists('datastream', $params) ) {
                $type = "Datastream";
                $handler = $params['datastream'];
            } elseif ( array_key_exists('file', $params) ) {
                $type = "File Passthru";
                $handler = $params['file'];
            }
            
            // Get the render status
            $standalone = "True";
            if ( array_key_exists('standalone', $params) ) {
                if ( $params['standalone'] != true ) {
                    $standalone = "False";
                } 
            }
            
            global $base_url;
            $url = $base_url . '/' . $module . '/' . $params['example'];

            // Get the encoding format
            $format = "None";
            if ( array_key_exists('format', $params) ) {
                $format = $params['format'];
            }
            
            // Create the data row to be added to the table
            $row = array($endpoint, $params['title'], $type, $handler, $standalone, $format, $url);
            
            // Add it to the table
            $rows[] = $row;
        }
        
        // Create a table and add it to the render list
        $content .= theme_table($header, $rows);
    }
    
    // Return the content for render
    return $content;
}

function islandora_service_handler() {

    // Get the arguments
    $args = func_get_args();

    // Check to make sure we have the module and endpoint parameters
    if ( count($args) < 2 )
    {
        var_dump($args);
        return "Malformed endpoint";
    }    
    
    // Create the results to be displayed
    $results = null;

    // Pop the module and endpoint of the front of the list
    $module = array_shift($args);
    $params = array_shift($args);
    
    // Set it to standalone by default
    $standalone = true;
    
    // Did the user set the standalone flag
    if ( array_key_exists('standalone', $params) ) {
        
        // Use the users flag
        $standalone = $params['standalone'];
    }
    
    // Did the user define a function callback
    if ( array_key_exists('function', $params) ) {
   
        // Check the param count
        if ( $params['param_count'] != count($args) ) {
            return "Parameter count doesn't match!";
        }
       
        // Execute the function
        $results = call_user_func_array($module.'_'.$function, $args);
        
        // Do we want this to be standalone or rendered in drupal
        if ( $standalone == true ) {
            if ( array_key_exists('format', $params) ) {
                
                // Set the header type
                header("Content-type: " . $params['format'] );
            }
        }

    } 
    // Did the user define a datastream that they wanted
    elseif ( array_key_exists('datastream', $params) ) {

        // Check the param count
        if ( $params['param_count'] == 1 ) {
            return "Parameter count doesn't match!";
        }
        
        module_load_include('inc', 'fedora_repository', 'fedora_respository');
        $results = makeObject($args[0], $params['datastream']);

        // Do we want this to be standalone or rendered in drupal
        if ( $standalone == true ) {
            //header("Content-type: ???");
        }
    } 
    // Did the user define a file that they want passed through
    elseif ( array_key_exists('file', $params) ) {
        
        // Create a file handler to the player
        $fileHandler = fopen(drupal_get_path('module', $module) . $params['file'], "r");
    
        // Psss the binary to the browser
        $results = file_get_contents($fileHandler);
    
        // Do we want this to be standalone or rendered in drupal
        if ( $standalone == true ) {
            // Set the header to shockwave
            header("Content-type: ". mime_content_type($file));
            header("Content-Length: " . filesize($fileHandler));    
        }
    } 
    else {
        // Shouldn't reach here
        echo("Module ". $module . " doesn't specify a handler. Your options are function, file or datastream");
        var_dump($params);
        die();
    }

    // Do we want this to be standalone or rendered in drupal
    if ( $params['standalone'] == true ) {
       
        // Get the HTTP header 
        $http = get_headers($url);
        if ( $http[0] == 'HTTP/1.1 200 OK' ) {
            // Show we enable caching
            if ( $params['cache'] == true ) {
                // Cache for a month
                header("Cache-Control: max-age=2592000, must-revalidate"); // HTTP 1.1
            } else {
                header("Cache-Control: no-cache"); // HTTP 1.1
            }
        // HTTP 1.0 
        } else {
            // Show we NOT enable caching
            if ( $params['cache'] != true ) {
                header("Pragma: no-cache"); // HTTP 1.0
            }
        }
        // Standalone
        echo $results;
    } else {
        // Render in drupal
        return $results;
    }
}


/**
 * Example register endpoints hook
 * @return type 
 */
function islandora_services_register_services()
{
    // Load the service types
    module_load_include('inc', 'islandora_services', 'ServiceTypes');

    // Define the end points
    return array(
        'islandora_services' => array (
            'myendpoint' => array (
                'title' => 'test callback', 
                'function' => 'myendpoint_handler', 
                'param_count' => 1, 
                'security' => array('access content'),
                'format' => ServiceTypes::JSON,
                'cache' => true,
                'example' => '/myendpoint/{value}',
            ),
            'myendpoint2' => array (
                'title' => 'test callback2',
                'function' => 'myendpoint_handler2',
                'param_count' => 2,
                'security' => array('access content'),
                'standalone' => false,   // <--- Default is true
                'format' => ServiceTypes::HTML,
                'cache' => true,
                'example' => 'myendpoint/{value1}/{value2}',
            ),
        )
    );
}

/**
 * Example callback
 * @param type $param 
 */
function islandora_services_myendpoint_handler($param) {
    $results = "islandora_services_myendpoint_handler(".$param.");";
    return $results;
}

/**
 * Example callback
 * @param type $param 
 */
function islandora_services_myendpoint_handler2($param, $param2) {
    $results = "islandora_services_myendpoint_handler(".$param.",".$param2.");";
    return $results;
}
